// MotorModel.h
#pragma once

#include <algorithm> // For std::max/min
#include <cmath>     // For M_PI

// Simulates a brushless motor, including its physical response (RPM)
// and the forces it generates.
class MotorModel {
public:
    // --- Constructor ---
    // Initializes the motor with both its dynamic response and physical properties.
    MotorModel(float time_constant_s = 0.025f, 
               float thrust_coeff = 1.7e-5f, 
               float moment_coeff = 3e-6f,
               float max_rpm = 38850.0f) // Example: 22.2V * 1750KV
        : m_time_constant(time_constant_s),
          m_thrust_coefficient(thrust_coeff),
          m_moment_coefficient(moment_coeff),
          m_max_rpm(max_rpm),
          m_current_rpm(0.0f) {}

    // --- Methods ---

    // Updates the motor's RPM based on the command and time step.
    // command: The desired throttle value (e.g., 1000-2000 for ESCs).
    // dt: The simulation time step in seconds.
    void update(int command, float dt) {
        float throttle_percentage = std::max(0.0f, (command - 1000.0f) / 1000.0f);
        float target_rpm = std::min(throttle_percentage * m_max_rpm, m_max_rpm);

        // Low-pass filter to simulate motor inertia
        float alpha = dt / (m_time_constant + dt);
        m_current_rpm += alpha * (target_rpm - m_current_rpm);
    }

    // Calculates the thrust (force) generated by the motor in Newtons.
    float getThrust() const {
        float rads_per_sec = m_current_rpm * (2.0f * M_PI / 60.0f);
        return m_thrust_coefficient * rads_per_sec * rads_per_sec;
    }

    // Calculates the torque generated by the motor in Newton-meters.
    float getTorque() const {
        float rads_per_sec = m_current_rpm * (2.0f * M_PI / 60.0f);
        return m_moment_coefficient * rads_per_sec * rads_per_sec;
    }

    float getRPM() const {
        return m_current_rpm;
    }

private:
    // Dynamic properties
    float m_time_constant;
    float m_current_rpm;

    // Physical properties
    float m_thrust_coefficient;
    float m_moment_coefficient;
    float m_max_rpm;
};
